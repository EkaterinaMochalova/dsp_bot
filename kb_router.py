# kb_router.py
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from kb import kb_answer, load_kb_intents

kb_router = Router(name="kb")

@kb_router.message(Command("kb_reload"))
async def kb_reload(m: types.Message):
    try:
        await load_kb_intents()
        await m.answer("üîÑ KB –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    except Exception as e:
        await m.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å KB: {e}")

# üëá –í–ê–ñ–ù–û: –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –±–æ—Ç–æ–≤
@kb_router.message(F.text & ~F.text.startswith("/") & ~F.via_bot)
async def kb_matcher(m: types.Message):
    q = (m.text or "").strip()
    low = q.lower()

    # –Ω–µ –º–µ—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –ø–æ–¥—Å–∫–∞–∑–∫–∞–º/–≥–µ–æ-–∫–æ–º–∞–Ω–¥–∞–º
    if any(low.startswith(x) for x in ("–ø–æ–¥–±–µ—Ä–∏", "—Å–ø–ª–∞–Ω–∏—Ä—É–π", "–Ω–∞–π–¥–∏", "—Ä—è–¥–æ–º", "–≤ —Ä–∞–¥–∏—É—Å–µ", "—ç–∫—Å–ø–æ—Ä—Ç", "geo ", "/")):
        return

    items = await kb_answer(q, allow_notion=True)
    items = [it for it in (items or []) if it.get("url")]
    if not items:
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=(it.get("title") or "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"), url=it["url"])]
        for it in items
    ])
    await m.answer("üßæ –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –í–æ—Ç —á—Ç–æ –Ω–∞—à–ª–æ—Å—å:", reply_markup=kb)